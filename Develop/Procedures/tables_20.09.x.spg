set session authorization lorencini;

alter table labens
	add mask varchar;

create extension if not exists unaccent;
create extension if not exists pg_trgm;
create extension if not exists fuzzystrmatch;

create schema if not exists api;

drop view if exists api.reports;
drop view if exists api.devicesbycustomers;
drop view if exists api.devices;

create or replace view api.devices as 
select e.recno device, e.serie, e.descri devicename, e.tipo devicetypeid, t.sigla devicetypeabbreviation, t.descri devicetypename, e.fabricante manufacturerid, fa.nome manufacturer,     
       e.potencia power, e.potencia_a powera, e.potencia_b powerb, e.potencia_un powerunit, e.fases phases, e.lote, e.imped impedance, e.imped_a impedancea, e.imped_b impedancb, 
       e.tensao voltage, e.tensao_a voltagea, e.tensao_b voltageb, e.tensao_un voltageunit, e.corr electriccurrent, e.corr_a electriccurrenta, e.corr_b electriccurrentb, e.ano "year", 
       e.isolante insulator, i.nome insulatorname, e.volume, e.drenos tap, e.familia "family", f.descri familyname
  FROM public.labequip e
       JOIN public.labequip_tipo t 
         ON t.tipo = e.tipo
       LEFT JOIN public.labfabri fa 
         ON fa.recno = e.fabricante
       LEFT JOIN public.labisolante i 
         ON i.recno = e.isolante
       LEFT JOIN public.labfamilia f 
         ON f.recno = e.familia;                
        
create or replace view api.devicesbycustomers as     
select e.codigo tenantid, d.device, d.serie, d.devicename, d.devicetypeid, d.devicetypeabbreviation, d.devicetypename, d.manufacturerid, d.manufacturer,     
       d.power, d.powera, d.powerb, d.powerunit, d.phases, d.lote, d.impedance, d.impedancea, d.impedancb, d.voltage, d.voltagea, d.voltageb, d.voltageunit, 
       d.electriccurrent, d.electriccurrenta, d.electriccurrentb, d."year", d.insulator, d.insulatorname, d.volume, d.tap, d."family", d.familyname,
       e.energ, e."local", e.subest substation, e.tag, e.status
  from public.labequipxcli e
       join api.devices d
         on d.device = e.equip;
        
create or replace view api.reports as
select l.recno report, l.amostra sample, l.pedido "order", a.comodato ticket, l.relato_recno reporttype, l.diagnostico diagnostic, l.recomendacao recommendation, l.obs observation, 
       l.criacao created, l.emissao emmited, l.assinatura sign, l.status, l.pcoleta nextcollect, rc.descri crit_label, rc.cor crit_cor, 
       rc.recno crit_id, a.codigo tenantid, lr.titulo typetitle, lr.sigla typeabbreviation, lr.descri typedescription, s.descri description, 
       a.amostrador sampler, d.device, d.serie, d.devicename, d.status devicestatus, d.familyname, d.manufacturer, d.insulator, d.insulatorname, d.devicetypename,
       d."local", d.substation, d.tag, ah.ocorrencia received, l.revisao revision, a.tamb tenvironment, a.toleo tsample, a.tequip tdevice, d.volume 
  from public.labamostras_rel l
      join public.labamostras a
        on a.recno = l.amostra     
      left join labamostras_hist ah
        on ah.amostra = l.amostra 
       and ah.estado = 40
      join public.labrel lr
        on lr.recno = l.relato_recno
      join public.servicos s
        on s.codserv = l.codserv
      join api.devicesbycustomers d
        on d.tenantid = a.codigo 
       and d.device = a.equip_recno
      join vlaudocrit rc 
        on rc.relato_recno = l.relato_recno 
       and rc.recno  = l.labcrit_recno;

--drop table if exists sys_tasks_phases cascade;
--drop table if exists sys_phases cascade;
--drop table if exists sys_services cascade;
--drop table if exists sys_tasks cascade;

create table sys_phases(
   recno serial not null,
   name varchar(60) not null,
   constraint pk_sys_phases primary key(recno)
);

insert into sys_phases (name) values ('Entrada'), ('Agendado para'), ('Iniciando'), ('Executando'), ('Finalizado com Sucesso'), ('Finalizado com Erro');

create table sys_services(
   recno serial not null,
   name varchar(60) not null,
   status integer default(1) not null,
   source_tasks integer,
   maxprocs integer default(1) not null,
   constraint pk_sys_services primary key(recno),
   constraint fk_sys_services_1 foreign key(source_tasks)
      references sys_tables(recno) on update cascade on delete set null,
   constraint ck_sys_services_1 check (maxprocs > 0)
);

insert into sys_services (name, status, source_tasks, maxprocs) values ('Envio de E-mails', 1, sys_origem('sys_email'), 24);
insert into sys_services (name, status) values ('Recebimento de E-mails (IMAP4)', 16);

create table sys_tasks (
   recno serial not null,
   service integer not null,
   phase integer default(1) not null,
   phase_date timestamp default(current_timestamp) not null,
   source_table integer,
   source_recno integer,
   pulse timestamp,
   id varchar(38),
   priority integer default(1000),
   constraint pk_sys_tasks primary key(recno),
   constraint fk_sys_tasks_1 foreign key(service) references sys_services(recno)
      on update cascade on delete cascade,
   constraint fk_sys_tasks_2 foreign key(phase) references sys_phases(recno)
      on update cascade on delete restrict,
   constraint fk_sys_tasks_3 foreign key(source_table) references sys_tables(recno)
      on update cascade on delete restrict
);

create index idx_sys_tasks_1 on sys_tasks(service) where (phase = 2);
create index idx_sys_tasks_2 on sys_tasks(service) where (phase = 3);
create index idx_sys_tasks_3 on sys_tasks(service) where (phase = 4);
create index idx_sys_tasks_4 on sys_tasks(service) where (phase = 5);
create index idx_sys_tasks_5 on sys_tasks(service, id) where (phase = 3);
create index idx_sys_tasks_6 on sys_tasks(service, id) where (phase = 4);

create table sys_tasks_phases(
   task integer not null,
   phase integer not null,
   date timestamp default(localtimestamp) not null,
   username varchar(20) not null,
   constraint pk_sys_tasks_phases primary key(task, phase),
   constraint fk_sys_tasks_phases_1 foreign key(task)
      references sys_tasks(recno) on update cascade on delete cascade,
   constraint fk_sys_tasks_phases_2 foreign key(phase)
      references sys_phases(recno) on update cascade on delete restrict,
   constraint fk_sys_tasks_phases_3 foreign key(username)
      references sys_users(username) on update cascade on delete restrict);

create or replace view vtasks as
   select t.recno, t.service, s.name service_name, t.phase, p."name" phase_name, t.phase_date, 
          t.priority, t.id, t.pulse, pt.username "user", u."name" username, u.email 
     from sys_tasks t
          join sys_services s
            on s.recno = t.service
          join sys_phases p
            on p.recno = t.phase
          join sys_tasks_phases pt
            on pt.task = t.recno 
           and pt.phase = t.phase
          join sys_users u
            on u.username = pt.username;

CREATE INDEX idx_labamostras_res_1 ON public.labamostras_res(relato_recno, ensaio_recno);            

create table api.reports_results (
	laudo integer not null,
	ensaios integer[] not null,
	resultados numeric(18, 4) default(0) not null,
	recno serial not null,
	constraint pk_reports_results primary key(laudo),
	constraint fk_reports_results_1 foreign key(laudo) 
		references labamostras_rel(recno) on update cascade on delete cascade,
	constraint uk_recno unique(recno));

create table api.reports_assays (
	report integer not null,
	reporttype integer not null,
	hash varchar(32) not null,
	assays integer[] not null,
   titles varchar[] not null,
	results varchar[] not null,
	recno serial not null,
	constraint pk_reports_assays primary key(report),
	constraint fk_reports_assays_1 foreign key(report)
		references public.labamostras_rel(recno) on update cascade on delete cascade,
	constraint fk_reports_assays_2 foreign key(report)
		references public.labamostras_rel(recno) on update cascade on delete cascade,
	constraint fk_reports_assays_3 foreign key(reporttype)
		references public.labrel(recno) on update cascade on delete cascade,
	constraint uk_reports_assays_1 unique(recno));		         
		         
-- Criar trigger antes de executar este comando
update labens set recno = recno;

insert into api.reports_assays(report, reporttype, hash, assays, titles, results)
select g.laudo, g.relato_recno, md5(string_agg(g.ensaio_recno::text, '|')), array_agg(g.ensaio_recno), array_agg(g.nome), array_agg(g.valor)
      from (select r.laudo, r.relato_recno, r.ensaio_recno, e.nome, ensaio_mascara(r.ensaio_recno, r.valor) valor
              from labamostras_res r
                   join labrel_ens le 
                     on le.relato_recno = r.relato_recno 
                    and le.ensaio_recno = r.ensaio_recno
                   join labens e
                     on e.recno = le.ensaio_recno 
                   join labamostras_rel l                   
                     on l.recno = r.laudo 
                    and l.status = 3
                    and l.revisao is null
                    and l.assinatura is not null
             order by r.laudo, r.relato_recno, le.ordem, le.ensaio_recno) g
    group by g.laudo, g.relato_recno;


create or replace view api.spreadsheet as
select r.tenantid, r.report, r.reporttype, r.crit_cor, r.crit_label, r.serie, r.sample, r.ticket, r.order, r.received, r.emmited, r.tenvironment, r.tsample, r.tdevice,
       r.tag, r.devicestatus, a.assays, a.results, r.diagnostic, r.recommendation, r.insulatorname, r.volume
  from api.reports r
       join api.reports_assays a
         on a.report = r.report 
 where r.status = 3
   and r.revision is null
   and r.sign is not null;

create or replace view api.reporttypes as
select lr.recno "type", lr.ativo active, lr.descri "name", lr.titulo title, lr.sigla abbreviation,
       lr.inmetro, lr.acreditacao accreditation
  from labrel lr;
  
create table api.ftsdevicesbycustomers (
	tenantid integer not null,
	device integer not null,
	fts tsvector,
	recno serial not null,
	constraint pk_ftsdevicesbycustomers primary key(tenantid, device),
	constraint fk_ftsdevicesbycustomers foreign key(tenantid, device)
		references public.labequipxcli(codigo, equip) on update cascade on delete cascade,
	constraint uk_unique unique(recno));

create index idx_ftsdevicesbycustomers_1 on api.ftsdevicesbycustomers using gin (fts);

select tsearch_equip(codigo, equip) from labequipxcli;

create table api.ftsreports (
	report integer not null,
	fts tsvector not null,
	recno serial not null,
	constraint pk_ftsreports primary key(report),
	constraint fk_ftsreports_1 foreign key(report)
		references public.labamostras_rel(recno) 
		on update cascade on delete cascade,
	constraint uk_ftsreports_1 unique(recno));

create index idx_ftsreports_1 on api.ftsreports using gin (fts);

select tsearch_laudo(recno) from labamostras_rel where status in (3, 4);

create table api.ftscustomers (
	tenantid integer not null,
	fts tsvector not null,
	recno serial not null,
	constraint pk_ftscustomers primary key(tenantid),
	constraint fk_ftscustomers_1 foreign key(tenantid)
		references public.tbclientes(codigo) 
		on update cascade on delete cascade,
	constraint uk_ftscustomers_1 unique(recno));

create index idx_ftscustomers_1 on api.ftscustomers using gin (fts);   

select tsearch_cliente(codigo) from public.tbclientes;

alter table sys_emailto
	rename email to message;

alter table sys_emailatach 
	rename email to message;   

alter table sys_emailto 
	add status integer default(0) not null,
	add to_domain varchar(100),
	add entry_ timestamp default(localtimestamp) not null,
	add send_ timestamp,
	add schedule timestamp default(localtimestamp) not null,
	add result_ varchar(100),
	add constraint ck_sys_emailto_3 check (status between 0 and 3),
	add constraint ck_sys_emailto_4 check (entry_ <= send_);
	
update sys_emailto c 
   set status = m.status, entry_ = m.entry_, send_ = m.send_, schedule = coalesce(m.schedule, m.entry_), to_domain = substr(to_, strpos(to_, '@') + 1) 
  from sys_email m
 where m.recno = c.message;

-- create or replace view api.spreadsheet as 
--    select g.laudo, g.relato_recno, array_agg(g.nome) as ensaios, array_agg(g.valor) as resultados
--      from (select r.laudo, r.relato_recno, e.nome, r.valor
--              from labamostras_res r
--                   join labrel_ens le 
--                     on le.relato_recno = r.relato_recno 
--                    and le.ensaio_recno = r.ensaio_recno
--                   join labens e 
--                     on e.recno = r.ensaio_recno
--             order by r.laudo, r.relato_recno, le.ordem) g
--    group by g.laudo, g.relato_recno;