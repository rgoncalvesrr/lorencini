-----------------------------------------------------------------------------------------------------------------------
--- Preparação
-----------------------------------------------------------------------------------------------------------------------
select 
   setval('sys_tables_recno_seq', max(recno))
from 
   sys_tables;

-----------------------------------------------------------------------------------------------------------------------
--- Atualização ORDEM DE PRODUÇÃO
-----------------------------------------------------------------------------------------------------------------------
drop table if exists public.oe cascade;
drop table if exists public.oe_pedidos cascade;
drop table if exists public.oe_serv cascade;
drop table if exists public.oe_amostras cascade;
drop table if exists public.oe_mat cascade;
drop table if exists public.oe_mo cascade;

--- Ordem de Execução
create table public.oe (
	oe serial not null,
	cliente integer not null,
	status integer default(10) not null,
	criada timestamp default(clock_timestamp()) not null,
	emitida timestamp,
	executada timestamp,
	produzida timestamp,
	cancelada timestamp,
	recno serial not null,
	constraint pk_oe primary key(oe),
	constraint fk_oe_1 foreign key(cliente)
		references tbclientes(codigo) on update cascade on delete cascade,
	constraint uk_oe_1 unique(recno),
	constraint ck_oe_1 check(status in (10,20,30,40,50,99)),
	constraint ck_oe_2 check(emitida is null or emitida >= criada),
	constraint ck_oe_3 check(executada is null or executada >= emitida),
	constraint ck_oe_4 check(produzida is null or produzida >= executada),
	constraint ck_oe_6 check(cancelada is null or cancelada >= emitida));

alter table public.oe owner to lorencini;

create index idx_oe_1 on public.oe(cliente) where (status = 10);

create table public.oe_serv(
	oe integer not null,	
	codserv integer not null,
	qtd integer default(1) not null,
   unitario moeda$ not null,
   vvenda moeda$ not null,
   vtotal moeda$ not null,
	amostras integer default(0) not null,
	recno serial not null,
	constraint pk_oe_serv primary key(oe, codserv),
	constraint fk_oe_serv_1 foreign key(oe)
		references public.oe(oe) on update cascade on delete cascade,
	constraint fk_oe_serv_2 foreign key(codserv)
		references public.servicos(codserv) on update cascade on delete restrict,
	constraint uk_oe_serv_1 unique(recno),
	constraint ck_oe_serv_1 check(qtd > 0),
   constraint ck_oe_serv_2 check(amostras between 0 and qtd),
   constraint ck_oe_serv_3 check(unitario >= 0),
   constraint ck_oe_serv_4 check(vvenda >= 0),
   constraint ck_oe_serv_5 check(vtotal >= 0));

alter table public.oe_serv owner to lorencini;

create table public.oe_amostras(
	oe integer not null,	
	codserv integer not null,
	amostra integer not null,
	consumo qtd$,
	recno serial not null,
	constraint pk_oe_amostras primary key(oe, codserv, amostra),
	constraint fk_oe_amostras_1 foreign key(oe, codserv)
		references public.oe_serv(oe, codserv) on update cascade on delete cascade,
	constraint fk_oe_amostras_2 foreign key(amostra)
		references public.labamostras(recno) on update cascade on delete cascade,
	constraint uk_oe_amostras_1 unique(recno),
	constraint ck_oe_amostras_1 check(consumo > 0));

alter table public.oe_amostras owner to lorencini;

create index idx_oe_amostras on oe_amostras(amostra);

create table public.oe_mat(
	oe integer not null,
	material integer not null,
	qtd qtd$ default(1) not null,
   unitario moeda$ not null,
   vvenda moeda$ not null,
   vtotal moeda$ not null,
	recno serial not null,
	constraint pk_oe_mat primary key(oe, material),
	constraint fk_oe_mat_1 foreign key(oe)
		references public.oe(oe) on update cascade on delete cascade,
	constraint fk_oe_mat_2 foreign key(material)
		references public.produtos(codigo) on update cascade on delete restrict,
	constraint uk_oe_mat_1 unique(recno),
	constraint ck_oe_mat_1 check(qtd > 0),
   constraint ck_oe_mat_2 check(unitario >= 0),
   constraint ck_oe_mat_3 check(vvenda >= 0),
   constraint ck_oe_mat_4 check(vtotal >= 0));

alter table public.oe_mat owner to lorencini;

create table public.oe_mo(
	oe integer not null,	
	funcao integer not null,
	qtd integer default(1) not null,
   unitario moeda$ not null,
   vvenda moeda$ not null,
   vtotal moeda$ not null,
	recno serial not null,
	constraint pk_oe_mo primary key(oe, funcao),
	constraint fk_oe_mo_1 foreign key(oe)
		references public.oe(oe) on update cascade on delete cascade,
	constraint fk_oe_mo_2 foreign key(funcao)
		references public.tb_funcoes(id) on update cascade on delete restrict,
	constraint uk_oe_mo_1 unique(recno),
	constraint ck_oe_mo_1 check(qtd > 0),
   constraint ck_oe_mo_2 check(unitario >= 0),
   constraint ck_oe_mo_3 check(vvenda >= 0),
   constraint ck_oe_mo_4 check(vtotal >= 0));

alter table public.oe_mo owner to lorencini;

alter table labamostras_rel
	add oe integer;

alter table labamostras_rel   
	add constraint fk_labamostras_rel_9 foreign key(oe, codserv, amostra)
		references public.oe_amostras(oe, codserv, amostra)
		on update cascade on delete restrict;

ALTER TABLE public.pedido_serv 
	drop CONSTRAINT ckpedido_serv_5,
   drop amostras;

-- Atualiza saldo dos itens de serviço do pedidos
alter table pedido_serv disable trigger all;
update 
	pedido_serv ps
set
	saldo = qtd - pa.amostras
from (
	select 
	 	pedido, codserv, count(amostra) amostras
	from 
		pedido_amostras 
	group by 
		pedido, codserv) pa
where
	pa.pedido = ps.pedido and
	pa.codserv = ps.codserv;
alter table pedido_serv enable trigger all;

-- Zera saldo dos itens de serviço do pedidos
alter table pedido_serv disable trigger all;
update 
	pedido_serv ps
set
	saldo = 0
from 
	servicos  s
where	
	s.codserv = ps.codserv and
    s.vidraria is null;
alter table pedido_serv enable trigger all;

select sys_login('suporte@lorencini.com.br', 'a4406a88a03a0eae5a7b10000beab648');

-- Amostras disponíveis já utilizadas
-- update labamostras a
--    set estado = h.estado, descartado = saldo
--   from (select h.amostra, max(h.estado) estado
--           from labamostras_hist h
--                join labamostras a
--                  on a.recno = h.amostra
--                 and a.estado = 50
--          group by h.amostra
--         having max(h.estado) > 50) h
--  where a.recno = h.amostra
--    and a.coleta < current_date - interval '15 days';

-- update labamostras set estado = 60
--  where estado = 50
--    and coleta < current_date - interval '15 days';

-- -- Amostras recebidas já utilizadas
-- update labamostras a
--    set estado = h.estado, descartado = qtd - saldo, saldo = 0
--   from (select h.amostra, max(h.estado) estado
--           from labamostras_hist h
--                join labamostras a
--                  on a.recno = h.amostra
--                 and a.estado < 40
--          group by h.amostra
--         having max(h.estado) > 40) h
--  where a.recno = h.amostra
--    and a.coleta < current_date - interval '15 days';

-- -- Amostras utilizadas
-- update labamostras a
--    set estado = 60
--   from (select a.recno
--           from labamostras a
--          where a.estado = 40
--            and a.coleta < current_date - interval '15 days'
--            and exists(
--   		         select 1
--            	     from labamostras_rel r
--      	          where r.amostra = a.recno)) x
--  where x.recno = a.recno;

-- Amostras cancelas
--  update labamostras a
--    set estado = 70, saldo = 0
--  from (select a.recno
--          from labamostras a
--         where a.estado = 40
--           and a.coleta < current_date - interval '15 days'
--           and not exists(
--   		      select 1
--            	    from labamostras_rel r
--      	       where r.amostra = a.recno)) x
--  where x.recno = a.recno;

-- set session authorization postgres;
-- alter table labamostras disable trigger all;
-- update labamostras a
--    set estado = 60
--  from (select a.recno
--          from labamostras a
--         where a.estado = 40
--           and a.estado_data < current_date - interval '15 days') x
--  where x.recno = a.recno;
-- alter table labamostras enable trigger all;

-- alter table labproc drop os cascade;


alter table servicos
   add status smallint default 0 not null,
   add constraint ck_servicos_1 check(status between 0 and 1);

alter table servicos disable trigger all;
update servicos set status = 1;
alter table servicos enable trigger all;