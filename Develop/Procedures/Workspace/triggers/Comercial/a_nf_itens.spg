/**
   Processa atualizações apoós gravação dos itens

	@author    Ricardo Gonçalves
	@date      08/06/2009 16:58:08
	@trigger   nf_itens AIUP

	Histórico
	----------------------------------------------------------------------------
	04/10/2011 17:48:44 v2    Ricardo Gonçalves.
	  [+] Permite que OS de clientes do grupo do cliente da NF possam ser faturadas
*/
Create or Replace Function a_nf_itens()
Returns Trigger
as
$$
Declare
   rIdx        indices%rowtype;
   rNF         record;
   rCli        record;
   rOrc        record;
   xlog        log$;
Begin
   xlog.source_table := sys_origem('nf');
   -- Obtem o recno
   if tg_op = 'DELETE' then
      xlog.source_recno := old.recno_nf;
   else
      xlog.source_recno := new.recno_nf;
   end if;

   select
      a.*, b.tipo
   into
      rNF
   from
      nf a
   join
      nf_serie b on
      b.serie = a.serie
   where
      a.recno = xlog.source_recno;

   -- Obtem as aliquotas com base na data de emissão
   select
      *
   into
      rIdx
   from
      indices a
   join (
      select
         coalesce(max(vigencia), (select min(vigencia) from indices)) as vigencia
      from
         indices
      where
         vigencia <= rNF.emissao) b on
      b.vigencia = a.vigencia;

   if not FOUND then
      raise '[[É necessário que a tabela de índices contenha, ao menos, um registro.]]';
   end if;

   -- Prepara aliquotas
   if rIdx.icms > 0 then
      rIdx.icms := rIdx.icms / 100;
   end if;

   if rIdx.iss > 0 then
      rIdx.iss := rIdx.iss / 100;
   end if;

   if rIdx.pis > 0 then
      rIdx.pis := rIdx.pis / 100;
   end if;

   if rIdx.cofins > 0 then
      rIdx.cofins := rIdx.cofins / 100;
   end if;

   if rIdx.irpj_mat > 0 then
      rIdx.irpj_mat := rIdx.irpj_mat / 100;
   end if;

   if rIdx.cssl_mat > 0 then
      rIdx.cssl_mat := rIdx.cssl_mat / 100;
   end if;

   if rIdx.cssl_srv > 0 then
      rIdx.cssl_srv := rIdx.cssl_srv / 100;
   end if;

   if rIdx.irpj_srv > 0 then
      rIdx.irpj_srv := rIdx.irpj_srv / 100;
   end if;

   if rIdx.inss_mat > 0 then
      rIdx.inss_mat := rIdx.inss_mat / 100;
   end if;

   if rIdx.pis_srv > 0 then
      rIdx.pis_srv := rIdx.pis_srv / 100;
   end if;

   if rIdx.cofins_srv > 0 then
      rIdx.cofins_srv := rIdx.cofins_srv / 100;
   end if;

   if rIdx.inss_srv > 0 then
      rIdx.inss_srv := rIdx.inss_srv / 100;
   end if;

   if tg_op <> 'INSERT' then
      if tg_op = 'DELETE' then
         select
            *
         into
            rOrc
         from
            tb_orcamentos
         where
            os = old.os;

         xlog.title := 'Remoção da OS: ' || rOrc.idos;
         perform log(xlog);
      end if;

      -- Calcula os valores da NF
      if rNF.tipo = 1 then
         rNF.vlicms := rNF.vlicms - old.valor * rIdx.icms;
         rNF.vlirpj := rNF.vlirpj - old.valor * rIdx.irpj_mat;
         rNF.vlcssl := rNF.vlcssl - old.valor * rIdx.cssl_mat;
         rNF.vlinss := rNF.vlinss - old.valor * rIdx.inss_mat;
         rNF.vlpis := rNF.vlpis - old.valor * rIdx.pis;
         rNF.vlcofins := rNF.vlcofins - old.valor * rIdx.cofins;
      elsif rNF.tipo = 2 then
         rNF.vliss := rNF.vliss - old.valor * rIdx.iss;
         rNF.vlirpj := rNF.vlirpj - old.valor * rIdx.irpj_srv;
         rNF.vlcssl := rNF.vlcssl - old.valor * rIdx.cssl_srv;
         rNF.vlinss := rNF.vlinss - old.valor * rIdx.inss_srv;
         rNF.vlpis := rNF.vlpis - old.valor * rIdx.pis_srv;
         rNF.vlcofins := rNF.vlcofins - old.valor * rIdx.cofins_srv;
      end if;

      update
         nf
      set
         valor = valor - old.valor, vlicms = rNF.vlicms, vlirpj = rNF.vlirpj,
         vlcssl = rNF.vlcssl, vlcom = vlcom - old.vlcom, vlinss = rNF.vlinss,
         vlpis = rNF.vlpis, vlcofins = rNF.vlcofins, vliss = rNF.vliss
      where
         recno = old.recno_nf;
   end if;

   if tg_op <> 'DELETE' then
      select
         *
      into
         rOrc
      from
         tb_orcamentos
      where
         os = new.os;

      if not exists(
         select
            1
         from
            tb_orcamentos a
         join
            nf b on
            b.codigo = a.idcliente and
            b.recno = new.recno_nf
         where
            a.os = new.os)
      then
         select
            *
         into
            rCli
         from
            tbclientes a
         join
            nf b on
            b.codigo = a.codigo and
            b.recno = new.recno_nf;

         -- verifica se o cliente pertence ao grupo
         if not exists(
            select
               1
            from
               tbclixgrupos g
            join
               tbclixgrupos cg on
               cg.tbcli_grupos_recno = g.tbcli_grupos_recno and
               cg.codigo = rOrc.idcliente
            where
               g.codigo = rCli.codigo)
         then
            raise '[[OS % não pertence ao cliente %. Verifique!]]', rOrc.idos, rCli.nome_chave;
         end if;
      end if;

      if tg_op = 'INSERT' then
         xlog.title := 'Inclusão da OS: ' || rOrc.idos;
         perform log(xlog);
      end if;

      -- Calcula os valores da NF
      if rNF.tipo = 1 then
         rNF.vlicms := rNF.vlicms + new.valor * rIdx.icms;
         rNF.vlirpj := rNF.vlirpj + new.valor * rIdx.irpj_mat;
         rNF.vlcssl := rNF.vlcssl + new.valor * rIdx.cssl_mat;
         rNF.vlinss := rNF.vlinss + new.valor * rIdx.inss_mat;
         rNF.vlpis := rNF.vlpis + new.valor * rIdx.pis;
         rNF.vlcofins := rNF.vlcofins + new.valor * rIdx.cofins;
      elsif rNF.tipo = 2 then
         rNF.vliss := rNF.vliss + new.valor * rIdx.iss;
         rNF.vlirpj := rNF.vlirpj + new.valor * rIdx.irpj_srv;
         rNF.vlcssl := rNF.vlcssl + new.valor * rIdx.cssl_srv;
         rNF.vlinss := rNF.vlinss + new.valor * rIdx.inss_srv;
         rNF.vlpis := rNF.vlpis + new.valor * rIdx.pis_srv;
         rNF.vlcofins := rNF.vlcofins + new.valor * rIdx.cofins_srv;
      end if;

      update
         nf
      set
         valor = valor + new.valor, vlicms = rNF.vlicms, vlirpj = rNF.vlirpj,
         vlcssl = rNF.vlcssl, vlcom = vlcom + new.vlcom, vlinss = rNF.vlinss,
         vlpis = rNF.vlpis, vlcofins = rNF.vlcofins, vliss = rNF.vliss
      where
         recno = new.recno_nf;
   end if;

   return null;
end;
$$
language plpgsql;