/**
   Gera documento pesquisável para a amostra informada

	@author    Ricardo Gonçalves
	@date      28/10/2021
	@trigger

   @param amostra_   código da amostra  
   @param atualiza_  se verdadeiro atualiza o banco de dados

	Histórico
	-------------------------------------------------------------------------------------------------------------------
 */
Create or Replace Function tsearch_amostra(
   in amostra_ integer,   
   in atualiza_ boolean = true)
Returns tsvector As
$$
declare
   r     record;
   docto tsvector;
begin
   docto := null;
   
   select s.ticket, s.status_label, s.status_descri, s.sampler, s."local", c.empresa, c.nome_chave, 
          c.cidade, c.estado, c.cnpj, c.cpf, d.serie, d.devicename, d.devicetypeabbreviation, d.devicetypename, 
          d.manufacturer, d.insulatorname, d.familyname, d.substation, d.tag 
     into r
     from api.samples s
          join public.tbclientes c
            on c.codigo = s.tenantid
          left join api.devicesbycustomers d
            on d.tenantid = s.tenantid 
           and d.device = s.device
    where s.sample = amostra_;
   
   if found then      
      docto := sys_fts_compose(docto, amostra_);
      docto := sys_fts_compose(docto, r.ticket);
      docto := sys_fts_compose(docto, r.status_label);
      docto := sys_fts_compose(docto, r.status_descri); 
      docto := sys_fts_compose(docto, r.sampler);
      docto := sys_fts_compose(docto, r.local);
      docto := sys_fts_compose(docto, r.empresa);
      docto := sys_fts_compose(docto, r.nome_chave);
      docto := sys_fts_compose(docto, r.cidade);
      docto := sys_fts_compose(docto, r.estado);
      docto := sys_fts_compose(docto, r.cnpj);
      docto := sys_fts_compose(docto, r.cpf);
      docto := sys_fts_compose(docto, r.serie); 
      docto := sys_fts_compose(docto, r.devicename);
      docto := sys_fts_compose(docto, r.devicetypeabbreviation);
      docto := sys_fts_compose(docto, r.devicetypename);
      docto := sys_fts_compose(docto, r.manufacturer);
      docto := sys_fts_compose(docto, r.insulatorname); 
      docto := sys_fts_compose(docto, r.familyname);
      docto := sys_fts_compose(docto, r.substation);
      docto := sys_fts_compose(docto, r.tag);
   end if;
   
   if atualiza_ then
      if docto is null then
         delete 
           from api.ftssamples
          where sample = amostra_;
      else
         insert into api.ftssamples
            (sample, fts)
         values
            (amostra_, docto)
         on conflict (sample) 
            do update set fts = excluded.fts;
      end if;
   end if;

   return docto;
end;
$$
language plpgsql;