/**
   Gera documento pesquisável para o laudo informado

	@author    Ricardo Gonçalves
	@date      14/09/2020
	@trigger

	Histórico
	-------------------------------------------------------------------------------------------------------------------
   3/12/2021   Ricardo Gonçalves.
      [+] Inclusão da descrição do status.
 */
Create or Replace Function tsearch_laudo(
   in in_laudo integer,
   in in_atualiza boolean = true)
Returns tsvector As
$$
declare   
   r     record;
   docto tsvector;
begin
   docto := null;

   select 
      l.amostra, l.pedido, a.comodato, l.diagnostico, l.recomendacao, l.obs, l.destinatario, 
      ls.label status, lr.titulo, lr.descri, lr.sigla, a.amostrador, 
      s.descri servico, e.serie, e.descri equip_nome, sys_iif(ec.status = 1, 'energizado', 'desligado') equip_status,
      e.familia, e.fabricante, e.isolante, e.tipo, ec."local", ec.subest, ec.tag, c.descri crit_desc, c.label crit     
   into 
      r  
   from 
      labamostras_rel l
   join 
      labamostras_rel_status ls on 
      ls.status = l.status
   join 
      labamostras a on 
      a.recno = l.amostra 
   join 
      labrel lr on 
      lr.recno = l.relato_recno
   join
      servicos s on
      s.codserv = l.codserv
   join
      labequipxcli ec on 
      ec.codigo = a.codigo and
      ec.equip = a.equip_recno
   join
      vequip e on 
      e.recno = a.equip_recno
   join
      vlaudocrit c on 
      c.recno = l.labcrit_recno and 
      c.relato_recno = l.relato_recno
   where
      l.recno = in_laudo;

   if found then      
      docto := sys_fts_compose(docto, in_laudo);
      docto := sys_fts_compose(docto, r.pedido);
      docto := sys_fts_compose(docto, r.amostra);      
      docto := sys_fts_compose(docto, r.comodato); 
      docto := sys_fts_compose(docto, r.diagnostico); 
      docto := sys_fts_compose(docto, r.recomendacao); 
      docto := sys_fts_compose(docto, r.obs); 
      docto := sys_fts_compose(docto, r.destinatario); 
      docto := sys_fts_compose(docto, r.status); 
      docto := sys_fts_compose(docto, r.titulo); 
      docto := sys_fts_compose(docto, r.descri); 
      docto := sys_fts_compose(docto, r.sigla); 
      docto := sys_fts_compose(docto, r.amostrador); 
      docto := sys_fts_compose(docto, r.servico); 
      docto := sys_fts_compose(docto, r.serie); 
      docto := sys_fts_compose(docto, r.equip_nome); 
      docto := sys_fts_compose(docto, r.equip_status);
      docto := sys_fts_compose(docto, r.familia); 
      docto := sys_fts_compose(docto, r.fabricante); 
      docto := sys_fts_compose(docto, r.isolante); 
      docto := sys_fts_compose(docto, r.tipo); 
      docto := sys_fts_compose(docto, r.local); 
      docto := sys_fts_compose(docto, r.subest); 
      docto := sys_fts_compose(docto, r.tag); 
      docto := sys_fts_compose(docto, r.crit_desc);
      docto := sys_fts_compose(docto, r.crit);
   end if;

   if docto is not null then
      if in_atualiza then         
         update 
            api.ftsreports
         set
            fts = docto
         where
            report = in_laudo;
            
         if not Found then
            insert into api.ftsreports
               (report, fts)
            values
               (in_laudo, docto);
         end if;        
      end if;
   else
      perform log_warning(format('Não há conteúdo para gerar o laudo %s', in_laudo));
   end if;

   return docto;
end;
$$
language plpgsql;