/**
   Versão 2.4.6 - Remoção do parcelamento

	@author    Ricardo Gonçalves
	@date      23/11/2009 11:28:31
	@trigger

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso
*/

-- Ajustando títulos a pagar
alter table fin_pagar
  drop valor_parc,
  drop parcelar,
  add juros numeric(12, 2) default 0 not null,
  add multa numeric(12, 2) default 0 not null,
  add descto numeric(12, 2) default 0 not null,
  add total numeric(12, 2) default 0 not null;

DROP TRIGGER a_fin_pagar ON fin_pagar;
DROP TRIGGER b_fin_pagar ON fin_pagar;

update fin_pagar
   set total = valor + juros + multa - descto;

CREATE TRIGGER b_fin_pagar
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_pagar
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_pagar();
CREATE TRIGGER a_fin_pagar
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_pagar
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_pagar();

alter table fin_pagar add constraint ck_fin_pagar_juros check (juros >= 0);
alter table fin_pagar add constraint ck_fin_pagar_multa check (multa >= 0);
alter table fin_pagar add constraint ck_fin_pagar_descto check (descto <= valor);
alter table fin_pagar add constraint ck_fin_pagar_total check (total = (valor + juros + multa - descto));

delete
  from sys_errors
 where constraint_ like '%fin_pagar_bxs%';

delete
  from sys_errors
 where constraint_ = 'ck_fin_pagar_descto';

insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_descto', 'Desconto do título a pagar deve ser menor ou igual ao valor principal.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_juros', 'Valor dos juros do título a pagar não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_multa', 'Valor da multa no título a pagar não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_total', 'O valor total do título deve corresponder principal + juros + multa - desconto.', '');


-- Ajustando títulos a receber
alter table fin_receber
  drop valor_parc,
  drop parcelar,
  add juros numeric(12, 2) default 0 not null,
  add multa numeric(12, 2) default 0 not null,
  add descto numeric(12, 2) default 0 not null,
  add total numeric(12, 2) default 0 not null;

DROP TRIGGER a_fin_receber ON fin_receber;
DROP TRIGGER b_fin_receber ON fin_receber;

update fin_receber
   set total = valor + juros + multa - descto;

CREATE TRIGGER b_fin_receber
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_receber
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_receber();
CREATE TRIGGER a_fin_receber
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_receber
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_receber();

alter table fin_receber add constraint ck_fin_receber_juros check (juros >= 0);
alter table fin_receber add constraint ck_fin_receber_multa check (multa >= 0);
alter table fin_receber add constraint ck_fin_receber_descto check (descto <= valor);
alter table fin_receber add constraint ck_fin_receber_total check (total = (valor + juros + multa - descto));

delete
  from sys_errors
 where constraint_ like '%fin_receber_bxs%';

delete
  from sys_errors
 where constraint_ = 'ck_fin_receber_descto';

insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_descto', 'Desconto do título a receber deve ser menor ou igual ao valor principal.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_juros', 'Valor dos juros do título a receber não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_multa', 'Valor da multa no título a receber não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_total', 'O valor total do título deve corresponder principal + juros + multa - desconto.', '');

-- Atualizando o movimento bancário
DROP TRIGGER a_fin_banco ON fin_banco;
DROP TRIGGER b_fin_banco ON fin_banco;

update fin_banco
   set origem = 1, origem_recno = a.recno
  from (select c.recno, a.recno as rbco
          from fin_banco a
               join fin_pagar_bxs b
                 on b.recno = a.origem_recno
               join fin_pagar c
                 on c.recno = b.titulo
         where origem = 6) a
  where a.rbco = fin_banco.recno;

update fin_banco
   set origem = 2, origem_recno = a.recno
  from (select c.recno, a.recno as rbco
          from fin_banco a
               join fin_receber_bxs b
                 on b.recno = a.origem_recno
               join fin_receber c
                 on c.recno = b.titulo
         where origem = 5) a
  where a.rbco = fin_banco.recno;

CREATE TRIGGER b_fin_banco
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_banco
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_banco();

CREATE TRIGGER a_fin_banco
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_banco
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_banco();

-- Apaga tabelas obsoletas
delete from sys_tables where recno > 4;

drop table fin_pagar_bxs cascade;
drop table fin_receber_bxs cascade;
drop table comissoes_bxs cascade;