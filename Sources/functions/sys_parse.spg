create or replace function sys_parse(
   in in_stmt text,
   in in_compact boolean)
returns text as
$$
declare
   i              integer;   
   ignoreNChars   integer;
   rin            text[];
   rstmt          text;
   rchars         text[];
   rout           text;
   token          text;   
   result         text[];
   LF             text;
   ignoreBlock    boolean;
   cpLiteral      boolean;
begin
   if in_stmt = '' then
      raise 'Não há instruções para processamento'; 
   end if;

   ignoreBlock := false;
   rstmt := '';
   LF := '';
   if not in_compact then
      LF := chr(10);
   end if;

   rin := regexp_split_to_array(in_stmt, '\n');

   foreach rstmt in array rin 
   loop   
      rstmt := replace(rstmt, chr(13), '');
      rstmt := replace(rstmt, chr(10), '');
      if trim(rstmt) = '' then
         continue;
      end if;

      rstmt := rstmt || ' ';
      token := '';
      rout := '';
      ignoreNChars := 0;      
      cpLiteral := false;

      -- Converte linha em array de caracteres
      rchars := string_to_array(rstmt, null);

      -- Processamento a linha do arquivo
      for i in 1..array_length(rchars, 1) 
      loop

         -- Comentario em bloco
         if not cpLiteral and not ignoreBlock and (rchars[i] = '/') and (rchars[i + 1] = '*') then
            ignoreBlock := true;
         end if;

         -- Comentario em linha
         if not cpLiteral and (rchars[i] = '-') and (rchars[i + 1] = '-') then
            exit;
         end if;

         -- Verificando se acabou o comentário em bloco
         if ignoreBlock or (ignoreNChars > 0) then
        
            if (ignoreNChars > 0) then
               ignoreNChars := ignoreNChars - 1;
            end if;

            if ignoreBlock and (rchars[i] = '*') then            
               ignoreBlock := (rchars[i + 1] <> '/');
               ignoreNChars := 1;
            end if;

            Continue;         
         else        
            if rchars[i] not in (' ', '''', '.', ')', '(', '%', ';') then
               token := token || rchars[i];
            end if;

            if rchars[i] in (' ', '''', '.', ')', '(', '%', ';') then          
               if (token <> '') then                          
                  rout := rout || token;
               end if;

               if rchars[i] in (' ', '''', '.', ')', '(', '%', ';') then
                  if (i > 1) then
                     if (in_compact and (rchars[i] = ' ' and rchars[i - 1] <> ' ') or rchars[i] <> ' ') or (not in_compact) then
                        rout := rout || rchars[i];
                     end if;
                  else
                     rout := rout || rchars[i];
                  end if;
               end if;

               if (rchars[i] = '''') then            
                  cpLiteral := not cpLiteral;
               end if;

               token := '';
            end if;
         end if;        
      end loop;

      -- Remove espaços da linha
      if trim(rout) <> '' then         
         result := array_append(result, rout);        
      end if;
   end loop;
   
   return array_to_string(result, LF);
end;
$$
language 'plpgsql';

create or replace function sys_parse(
   in in_stmt text)
returns text as
$$
begin
   return sys_parse(in_stmt, true);
end;
$$
language 'plpgsql';