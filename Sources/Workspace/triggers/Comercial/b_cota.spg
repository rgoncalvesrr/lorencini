/**
   Processamento da cotação

	@author    Ricardo Gonçalves
	@date      19/12/2016 17:45:04
	@trigger

	Histórico
	-------------------------------------------------------------------------------------------------------------------
	16/03/2017 21:51:36 Ricardo
	   [*] Preenchimento da data de cancelamento da cotação
 */
Create or Replace Function b_cota()
Returns trigger As
$$
Declare
   r     record;
   erros text;
   lf    varchar;
Begin
   if tg_op = 'DELETE' then
      return old;
   end if;

   if new.vendedor is null then
      select id_vendedor
        into new.vendedor
        from tbclientes
       where codigo = new.cliente;
   end if;

   if not new.remessa then
      new.frete := 0;
      new.frascos := 0;
      new.seringas := 0;
      new.correio := null;
   end if;

   if new.vendedor is null then
      raise '[[O código do vendedor não foi informado na cotação %. Verifique se o cliente tem um vendedor associado.]]',
         new.recno;
   end if;

   if tg_op = 'INSERT' then
      new.status := 1;
      new.contato_fin := coalesce(new.contato_fin, new.contato);
      new.contato_tec := coalesce(new.contato_tec, new.contato);
   else
      if new.status < old.status and not sys_flag('cota', new.recno) then
         raise '[[Não é possível retroceder etapas na cotação %]]', new.recno;
      end if;

      -- Coloca a cotação em digitação novamente
      if new.status = old.status and old.status < 5 then
         new.status := 1;
      end if;

      -- Validação de mudanças
      if new.status > old.status then
         if new.status = 2 then -- cotação marcada como calculada (aguadando aprovação)
            -- Checando integridade da cotação
            select descri, reqsrv, reqmat, reqmo
              into r
              from orca_grupo
             where recno = new.grupo;

            if r.reqsrv and
               not exists(
                  select 1
                    from cota_serv
                   where cotacao = new.recno)
            then
               raise '[[A cotação %, do tipo %, requer o registro de itens de serviço.]]', new.recno, r.descri;
            end if;

            if r.reqmat and
               not exists(
                  select 1
                    from cota_mat
                   where cotacao = new.recno)
            then
               raise '[[A cotação %, do tipo %, requer o registro de materiais.]]', new.recno, r.descri;
            end if;

            if r.reqmo and
               not exists(
                  select 1
                    from cota_mo
                   where cotacao = new.recno)
            then
               raise '[[A cotação %, do tipo %, requer o registro de mão-de-obra.]]', new.recno, r.descri;
            end if;
            
            lf := '';
            erros := '';
            -- Verificando a seleção de laudos para os serviços
            for r in (
               select x.cotacao, x.servico, s.descri
                 from (select cs.cotacao, cs.servico
                         from cota_serv cs
                              join labrel rl
                                on rl.codserv = cs.servico       
                        where cs.cotacao = new.recno
                        group by cs.cotacao, cs.servico) x
                      left join cota_laudo cl
                        on cl.cotacao = x.cotacao
                       and cl.servico = x.servico
                      join servicos s
                        on x.servico = s.codserv
                where cl.relato_recno is null)
            loop
               erros := erros || lf || 
                  format('O serviço "%s - %s" requer seleção do tipo de laudo que será executado!', r.servico, r.descri);
               lf := chr(13) || chr(10);
            end loop;

            
            -- Validando informações de remessa
            if new.remessa then
               if coalesce(new.frascos, 0) + coalesce(new.seringas, 0) = 0 then
                  erros := erros || lf || '- Há indicação de remessa mas a quantidade de frascos e/ou seringas está zerada.';               
               end if;

               if new.envio < 3 then
                  if new.frete = 0 then
                     erros := erros || lf || '- Tipo de envio exige valor de frete.';
                  end if;

                  if new.envio = 1 and new.correio is null then
                     erros := erros || lf || '- Materiais enviados via correios exigem cálculo de SEDEX.';
                  end if;
               else
                  new.frete := 0;
                  new.correio := null;
               end if;
            end if;

            if erros <> '' then
               erros := format('[[A cotação %s não foi aprovada porquê:', new.recno) || lf || lf || erros || ']]';
               raise '[[%]]', erros;
            end if;

            new.markup := calcula_markup(sys_origem('cota'), new.recno);

            if not exists(
               select 1
                 from markup
                where recno = new.markup
                  and vlmat + vlmobra + vlsrvvar + vlsrvfixo > 0)
            then
               raise '[[A cotação %, do tipo %, está com valor 0.]]', new.recno, r.descri;
            end if;
         end if;

         -- Cotação enviada ao cliente
         if new.status = 4 then
            select current_date + validade
              into new.validade
              from orca_grupo
             where recno = new.grupo;

            -- Validade padrão caso não tenho sido definida validade
            new.validade := coalesce(new.validade, current_date + 7);
         end if;

         if new.status = 8 then
            new.cancelamento := clock_timestamp();
         else
            new.cancelamento := null;
         end if;
      end if;
   end if;

   return new;
End
$$
language plpgsql;