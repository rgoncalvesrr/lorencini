/**
   Valida as informações da nota fiscal antes de gravar

   @author    Ricardo Gonçalves
   @date      12/01/2016 19:43:20
   @trigger   labport B IUD

   Histórico
   ---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso
*/
CREATE OR REPLACE FUNCTION b_labport()
  RETURNS trigger AS
$$
Declare
   voperac     varchar;
   conexao     text;
   stmt        text;
   connok      text;
   r           record;
   ri          record;
BEGIN
   if tg_op <> 'DELETE' then
      if new.operac = 1 then
         voperac := 'remessa';
      else
         voperac := 'retorno';
      end if;

      -- Processando remessa
      if new.operac = 1 then
         if sys_paramb('fluent_cknfe') then
            -- Valida informações da nota fiscal
            conexao := coalesce('host=' || sys_paramv('fluent_host') || ' ', '')||
                  coalesce('port=' || sys_parami('fluent_port') || ' ', '')||
                  coalesce('dbname=' || sys_paramv('fluent_dbname') || ' ', '')||
                  coalesce('user=' || sys_paramv('fluent_user') || ' ', '')||
                  coalesce('password=' || sys_paramv('fluent_password') || ' ', '');

            connok := '';
            if (conexao is not null) then
               connok := dblink_connect('fx', conexao);
            end if;

            -- Tenta abrir a conexão com o banco do Fluent
            if ( trim(connok) = 'OK') then
               begin
                  select cnpj, cpf
                    into ri
                    from tbclientes
                   where codigo = new.codigo;

                  stmt := format('select ide_demi, icmstot_vnf from nfa0024001 where ide_nnf = %s and ide_serie = ''%s'' and cstat = 100', new.nf, new.nf_serie);
                  if ri.cnpj is not null then
                     stmt := stmt || format(' and dest_cnpj = ''%s''', ri.cnpj);
                  else
                     stmt := stmt || format(' and dest_cpf = ''%s''', ri.cpf);
                  end if;

                  select emissao, total
                    into r
                    from dblink('fx', stmt) as t(emissao date, total numeric(15,2));

                  if not Found then
                     raise '[[Não foi possível localizar uma nota fiscal válida para o cliente %. CNPJ/CPF %. Impossível registrar despacho.]]', new.codigo, coalesce(ri.cnpj, ri.cpf);
                  end if;

                  perform dblink_disconnect('fx');

                  new.nf_emissao := r.emissao;
                  new.nf_valor := r.total;
               exception
                  when raise_exception then
                  begin
                     perform dblink_disconnect('fx');
                     raise;
                  end;
               end;
            else
               raise '[[Banco de dados de notas não disponível. Conxão: (%)]]', conexao;
            end if;
         end if;
      end if;

      return new;
   else
      return old;
   end if;
END;
$$
  LANGUAGE 'plpgsql' VOLATILE;
