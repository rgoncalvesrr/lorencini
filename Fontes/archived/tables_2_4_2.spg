DROP TRIGGER a_fin_pagar ON fin_pagar;
DROP TRIGGER b_fin_pagar ON fin_pagar;
DROP TRIGGER a_fin_banco ON fin_banco;
DROP TRIGGER b_fin_banco ON fin_banco;
DROP TRIGGER a_fin_receber ON fin_receber;
DROP TRIGGER b_fin_receber ON fin_receber;
 
ALTER TABLE fin_banco ALTER historico TYPE character varying(100);
alter table fin_pagar add historico varchar(100);
alter table fin_pagar add parcelar boolean default false not null;
alter table fin_receber add parcelar boolean default false not null;
alter table fin_receber add historico varchar(100);


update fin_pagar set historico = coalesce(substr(obs, 1, 100), docto, 'Não informado');
update fin_receber set historico = coalesce(substr(obs, 1, 100), docto, 'Não informado');

alter table fin_pagar alter historico set not null;
alter table fin_receber alter historico set not null;

CREATE TRIGGER b_fin_banco
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_banco
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_banco();

CREATE TRIGGER a_fin_banco
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_banco
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_banco();

CREATE TRIGGER b_fin_pagar
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_pagar
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_pagar();

CREATE TRIGGER a_fin_pagar
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_pagar
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_pagar();

CREATE TRIGGER a_fin_receber
  AFTER INSERT OR UPDATE OR DELETE
  ON fin_receber
  FOR EACH ROW
  EXECUTE PROCEDURE a_fin_receber();

CREATE TRIGGER b_fin_receber
  BEFORE INSERT OR UPDATE OR DELETE
  ON fin_receber
  FOR EACH ROW
  EXECUTE PROCEDURE b_fin_receber();

create table fin_pagar_bxs (
   recno serial not null,
   titulo integer not null,
   historico varchar(100),
   cc varchar(25),
   vencto date not null,
   baixa date,
   valor numeric(12, 2) default 0 not null,
   juros numeric(12, 2) default 0 not null,
   multa numeric(12, 2) default 0 not null,
   descto numeric(12, 2) default 0 not null,
   total numeric(12, 2) default 0 not null
);

alter table fin_pagar_bxs add constraint pk_fin_pagar_bxs primary key(recno);
alter table fin_pagar_bxs add constraint fk_fin_pagar_bxs_titulo
   foreign key(titulo) references fin_pagar(recno)
   on update cascade on delete cascade;
alter table fin_pagar_bxs add constraint fk_fin_pagar_bxs_cc
   foreign key(cc) references cc(cc)
   on update cascade;

alter table fin_pagar_bxs add constraint ck_fin_pagar_bxs_valor check (valor >= 0);
alter table fin_pagar_bxs add constraint ck_fin_pagar_bxs_juros check (juros >= 0);
alter table fin_pagar_bxs add constraint ck_fin_pagar_bxs_multa check (multa >= 0);
alter table fin_pagar_bxs add constraint ck_fin_pagar_descto check (descto <= valor);
alter table fin_pagar_bxs add constraint ck_fin_pagar_bxs_total check (total = (valor + juros + multa - descto));
alter table fin_pagar_bxs add constraint uk_fin_pagar_bxs_recno unique(recno);

insert into sys_errors (constraint_, descri, solucao) values ('pk_fin_pagar_bxs', 'Parcela a pagar duplicada.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_fin_pagar_bxs_titulo', 'Título a pagar não localizado.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_fin_pagar_bxs_cc', 'Conta corrente referenciada por parcela a pagar não pode ser excluída.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_bxs_valor', 'Valor da parcela a pagar não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_descto', 'Desconto da parcela a pagar deve ser menor ou igual ao valor principal.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_bxs_juros', 'Valor dos juros da parcela a pagar não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_bxs_multa', 'Valor da multa na parcela a pagar não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_pagar_bxs_total', 'O valor total da parcela deve corresponder principal + juros + multa - desconto.', '');

create table fin_receber_bxs (
   recno serial not null,
   titulo integer not null,
   historico varchar(100),
   cc varchar(25),
   vencto date not null,
   baixa date,
   valor numeric(12, 2) default 0 not null,
   juros numeric(12, 2) default 0 not null,
   multa numeric(12, 2) default 0 not null,
   descto numeric(12, 2) default 0 not null,
   total numeric(12, 2) default 0 not null
);

alter table fin_receber_bxs add constraint pk_fin_receber_bxs primary key(recno);
alter table fin_receber_bxs add constraint fk_fin_receber_bxs_titulo
   foreign key(titulo) references fin_receber(recno)
   on update cascade on delete cascade;
alter table fin_receber_bxs add constraint fk_fin_receber_bxs_cc
   foreign key(cc) references cc(cc)
   on update cascade;

alter table fin_receber_bxs add constraint ck_fin_receber_bxs_valor check (valor >= 0);
alter table fin_receber_bxs add constraint ck_fin_receber_bxs_juros check (juros >= 0);
alter table fin_receber_bxs add constraint ck_fin_receber_bxs_multa check (multa >= 0);
alter table fin_receber_bxs add constraint ck_fin_receber_descto check (descto <= valor);
alter table fin_receber_bxs add constraint ck_fin_receber_bxs_total check (total = (valor + juros + multa - descto));
alter table fin_receber_bxs add constraint uk_fin_receber_bxs_recno unique(recno);

insert into sys_errors (constraint_, descri, solucao) values ('pk_fin_receber_bxs', 'Parcela a receber duplicada.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_fin_receber_bxs_titulo', 'Título a receber não localizado.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_fin_receber_bxs_cc', 'Conta corrente referenciada por parcela a receber não pode ser excluída.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_bxs_valor', 'Valor da parcela a receber não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_descto', 'Desconto da parcela a receber deve ser menor ou igual ao valor principal.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_bxs_juros', 'Valor dos juros da parcela a receber não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_bxs_multa', 'Valor da multa na parcela a receber não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_fin_receber_bxs_total', 'O valor total da parcela deve corresponder principal + juros + multa - desconto.', '');

create table comissoes_bxs (
   recno serial not null,
   recno_com integer not null,
   titulo_parc integer not null,
   baixa date,
   valor numeric(12, 2) default 0 not null,
   pagto date
);

alter table comissoes_bxs add constraint pk_comissoes_bxs primary key(recno);
alter table comissoes_bxs add constraint fk_comissoes_bxs_recno_com
   foreign key(recno_com) references comissoes(recno)
   on update cascade on delete cascade;
alter table comissoes_bxs add constraint fk_comissoes_bxs_titulo_parc
   foreign key(titulo_parc) references fin_receber_bxs(recno)
   on update cascade on delete cascade;
alter table comissoes_bxs add constraint ck_comissoes_bxs_valor check (valor >= 0);
alter table comissoes_bxs add constraint ck_comissoes_bxs_baixa check (baixa <= pagto);

insert into sys_errors (constraint_, descri, solucao) values ('pk_comissoes_bxs', 'Baixa de comissão duplicada.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_comissoes_bxs_recno_com', 'Comissão não localizada no arquivo de comissões devidas.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_comissoes_bxs_valor', 'Valor da comissão devida não pode ser negativo.', '');
insert into sys_errors (constraint_, descri, solucao) values ('ck_comissoes_bxs_baixa', 'Data do pagamento da comissão não pode ser inferior a data de baixa do título gerador da comissão.', '');
insert into sys_errors (constraint_, descri, solucao) values ('fk_comissoes_bxs_titulo_parc', 'Parcela receber a qual a comissão se refere não foi localizada.', '');

alter table nf add historico varchar(100);


create table wusers (
   codigo integer not null,
   username varchar(20) not null,
   name varchar(60) not null,
   password varchar(33) not null,
   active boolean default true not null,
   firstlogin timestamp,
   lastlogin timestamp,
   recno serial not null
);

alter table wusers add constraint pk_wusers primary key(codigo, username);
alter table wusers add constraint fk_wusers_codigo foreign key (codigo)
   references tbclientes(codigo) on update cascade on delete cascade;

insert into sys_tables (tabela, descri) values ('fin_receber_bxs', 'Contas a Receber - Parcelas');